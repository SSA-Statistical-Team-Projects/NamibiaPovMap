coefficients(condstep_selvars_list)
p.value(condstep_selvars_list$finalModel)
p.values(condstep_selvars_list$finalModel)
summary(condstep_selvars_list$finalModel)$coefficients
class(summary(condstep_selvars_list$finalModel)$coefficients)
as.data.table(summary(condstep_selvars_list$finalModel)$coefficients)
dt <- as.data.table(summary(condstep_selvars_list$finalModel)$coefficients)
dt[, vars := rownames(summary(condstep_selvars_list$finalModel)$coefficients)]
dt
dt$vars[dt$`Pr(>|t|)` <= 0.05]
dt$vars[dt$`Pr(>|t|)` <= 0.05][!dt$vars[dt$`Pr(>|t|)` <= 0.05] %in% "(Intercept)"]
caic_selvars_list <- dt$vars[dt$`Pr(>|t|)` <= 0.05][!dt$vars[dt$`Pr(>|t|)` <= 0.05] %in% "(Intercept)"]
nam)sel
nam_selvars_list
nam_selvars_list[nam_selvars_list %in% caic_selvars_list]
nam_selvars_list[!nam_selvars_list %in% caic_selvars_list]
saveRDS(nam_selvars_list, here("data-raw/nam_selvars_list.RDS") )
saveRDS(caic_selvars_list, here("data-raw/nam_caicselvars_list.RDS") )
saveRDS(census_dt, "data-clean/census_final.RDS")
saveRDS(survey_dt, "data-clean/survey_final.RDS")
devtools::load_all()
#----------------------- EBP MODEL  ESTAIMATION -------------------------------#
## environment set up
remove(list = objects())
options(
stringsAsFactors = F,
width = 100,
scipen = 6,
start.time= Sys.time()
)
pacman::p_load(data.table, dplyr, stringr, fuzzyjoin, povmap)
#------------------------------------------------------------------------------#
nam_selvars_list <- readRDS("data-raw/nam_selvars_list.RDS")
nam_caicselvars_list <- readRDS("data-raw/nam_caicselvars_list.RDS")
census_dt <- readRDS("data-clean/census_final.RDS")
survey_dt <- readRDS("data-clean/survey_final.RDS")
census_dt$const_code <- as.numeric(census_dt$const_code)
survey_dt$new_const_code <- as.numeric(survey_dt$new_const_code)
census_dt["wta_hh"] <- lapply(haven::zap_labels(census_dt["wta_hh"]) ,as.numeric)
intersect(intersect(nam_selvars_list, names(survey_dt)), names(census_dt))
nam_selvars_list
nam_selvars_list  <- intersect(intersect(nam_selvars_list, names(survey_dt)), names(census_dt))
census_dt <- as.data.table(census_dt)
survey_dt <- as.data.table(survey_dt)
survey_dt[, !duplicated(colnames(survey_dt)), with = F] %>%
mutate(poor_abs = ifelse(poor_abs == "Poor", 1, 0)) %>%
group_by(region_name, region_code) %>%
# mutate(poor_var = ifelse(wel_PPP < 6249.437, 1, 0)) %>%
summarize(weighted.mean(x = poor_abs,
w = wta_pop,
na.rm = TRUE))
survey_dt[, !duplicated(colnames(survey_dt)), with = F] %>%
mutate(poor_abs = ifelse(wel_abs <= pl_abs, 1, 0)) %>%
group_by(region_name, region_code) %>%
# mutate(poor_var = ifelse(wel_PPP < 6249.437, 1, 0)) %>%
summarize(weighted.mean(x = poor_abs,
w = wta_pop,
na.rm = TRUE))
unique(survey_dt$pl_abs)
nam_caicselvars_list
lmer_obj <- lmer(formula = as.formula(paste0(paste0("lwel_abs ~ ",
paste0(nam_caicselvars_list, collapse = " + ")),
"+ (1|new_const_code)")),
data = survey_dt,
weights = survey_dt$hhweight)
lmer_obj <- lme4::lmer(formula = as.formula(paste0(paste0("lwel_abs ~ ",
paste0(nam_caicselvars_list, collapse = " + ")),
"+ (1|new_const_code)")),
data = survey_dt,
weights = survey_dt$hhweight)
summary(lmer_obj)
summary(lmer_obj$model)
View(lmer_obj)
summary(lmer_obj[[1]])
lm_obj <-
lm(formula = as.formula(paste0("lwel_abs ~ ", paste0(nam_selvars_list, collapse = " + "))),
data = survey_dt,
weights = survey_dt$hhweight)
summary(lm_obj)
lm_obj <-
lm(formula = as.formula(paste0("lwel_abs ~ ", paste0(nam_caicselvars_list, collapse = " + "))),
data = survey_dt,
weights = survey_dt$hhweight)
summary(lm_obj)
unique(survey_dt$pl_abs)
survey_dt[, hhweight := hhsize * wta_hh]
sum(census_dt$hhsize, na.rm = T)
sum(survey_dt$hhweight, na.rm = T)
sum(survey_dt$wta_pop, na.rm = T)
log_model <- povmap::ebp(fixed = as.formula(paste("wel_abs ~ ", paste(nam_selvars_list,
collapse= "+"))),
pop_data = as.data.frame(na.omit(census_dt[, c(nam_selvars_list,
"const_code","hhsize"),
with = F])),
pop_domains = "const_code",
smp_data = as.data.frame(na.omit(survey_dt[, c("wel_abs",
nam_selvars_list,
"new_const_code",
"hhweight"),
with = F])),
smp_domains = "new_const_code",
transformation = "log",
threshold = 6249.437,
pop_weights = "hhsize",
weights = "hhweight",
L = 100,
B = 100,
cpus = 30,
MSE = TRUE,
na.rm = TRUE,
Ydump = "//esapov/esapov/NAM/GEO/Population/povmap/unitmodel_log.csv",
rescale_weights = TRUE)
as.data.frame(na.omit(survey_dt[, c("wel_abs",
nam_selvars_list,
"new_const_code",
"hhweight"),
with = F]))
as.data.frame(na.omit(census_dt[, c(nam_selvars_list,
"const_code","hhsize"),
with = F]))
unique(survey_dt$new_const_code)[!unique(survey_dt$new_const_code) %in% unique(census_dt$const_code)]
survey_dt <- readRDS("data-clean/survey_final.RDS")
unique(survey_dt$new_const_code)[!unique(survey_dt$new_const_code) %in% unique(census_dt$const_code)]
unique(census_dt$const_code)
unique(as.integer(survey_dt$new_const_code))
unique(as.integer(as.character(survey_dt$new_const_code)))
table(as.integer(as.character(survey_dt$new_const_code)), useNA = "always")
survey_dt[is.na(new_const_code),c("new_const_code", "const_code", "region_name", "region_code", "region_prev_code", "region_prev_name")]
table(survey_dt$const_code[is.na(survey_dt$new_const_code)])
devtools::load_all()
#----------------------- EBP MODEL  ESTAIMATION -------------------------------#
## environment set up
remove(list = objects())
options(
stringsAsFactors = F,
width = 100,
scipen = 6,
start.time= Sys.time()
)
pacman::p_load(data.table, dplyr, stringr, fuzzyjoin, povmap)
#------------------------------------------------------------------------------#
nam_selvars_list <- readRDS("data-raw/nam_selvars_list.RDS")
nam_caicselvars_list <- readRDS("data-raw/nam_caicselvars_list.RDS")
census_dt <- readRDS("data-clean/census_final.RDS")
survey_dt <- readRDS("data-clean/survey_final.RDS")
table(survey_dt$new_const_code, useNA = "always")
survey_dt[is.na(new_const_code), new_const_code := const_code]
table(survey_dt$new_const_code, useNA = "always")
table(census_dt$new_const_code, useNA = "always")
table(census_dt$const_code, useNA = "always")
class(census_dt$const_code)
class(survey_dt$new_const_code)
survey_dt[, new_const_code := as.integer(as.character(new_const_code))]
census_dt[, const_code := as.integer(const_code)]
unique(survey_dt$new_const_code)[!unique(survey_dt$new_const_code) %in% unique(census_dt$const_code)]
nam_selvars_list
nam_selvars_list <- intersect(intersect(nam_selvars_list, names(survey_dt)), names(census_dt))
### check that the poverty rates make sense
survey_dt[, !duplicated(colnames(survey_dt)), with = F] %>%
mutate(poor_abs = ifelse(wel_abs <= pl_abs, 1, 0)) %>%
group_by(region_name, region_code) %>%
# mutate(poor_var = ifelse(wel_PPP < 6249.437, 1, 0)) %>%
summarize(weighted.mean(x = poor_abs,
w = wta_pop,
na.rm = TRUE))
log_model <- povmap::ebp(fixed = as.formula(paste("wel_abs ~ ", paste(nam_selvars_list,
collapse= "+"))),
pop_data = as.data.frame(na.omit(census_dt[, c(nam_selvars_list,
"const_code","hhsize"),
with = F])),
pop_domains = "const_code",
smp_data = as.data.frame(na.omit(survey_dt[, c("wel_abs",
nam_selvars_list,
"new_const_code",
"hhweight"),
with = F])),
smp_domains = "new_const_code",
transformation = "log",
threshold = 6249.437,
pop_weights = "hhsize",
weights = "hhweight",
L = 100,
B = 100,
cpus = 30,
MSE = TRUE,
na.rm = TRUE,
Ydump = "//esapov/esapov/NAM/GEO/Population/povmap/unitmodel_log.csv",
rescale_weights = TRUE)
#------------------------------------------------------------------------------#
saveRDS(log_model, "data-clean/estimation_results/unitmodel_log.RDS")
ord_model <- povmap::ebp(fixed = as.formula(paste("wel_abs ~ ", paste(nam_selvars_list,
collapse= "+"))),
pop_data = as.data.frame(na.omit(census_dt[, c(nam_selvars_list,
"const_code","hhsize"),
with = F])),
pop_domains = "const_code",
smp_data = as.data.frame(na.omit(survey_dt[, c("wel_abs",
nam_selvars_list,
"new_const_code",
"hhweight"),
with = F])),
smp_domains = "new_const_code",
transformation = "ordernorm",
threshold = 6249.437,
pop_weights = "hhsize",
weights = "hhweight",
L = 100,
B = 100,
cpus = 30,
MSE = FALSE,
na.rm = TRUE,
Ydump = "//esapov/esapov/NAM/GEO/Population/povmap/unitmodel_ord.csv",
rescale_weights = TRUE)
#------------------------------------------------------------------------------#
saveRDS(ord_model, "data-clean/estimation_results/unitmodel_ordernorm.RDS")
bcx_model <- povmap::ebp(fixed = as.formula(paste("wel_abs ~ ", paste(nam_selvars_list,
collapse= "+"))),
pop_data = as.data.frame(na.omit(census_dt[, c(nam_selvars_list,
"const_code","hhsize"),
with = F])),
pop_domains = "const_code",
smp_data = as.data.frame(na.omit(survey_dt[, c("wel_abs",
nam_selvars_list,
"new_const_code",
"hhweight"),
with = F])),
smp_domains = "new_const_code",
transformation = "box.cox",
threshold = 6249,
pop_weights = "hhsize",
weights = "hhweight",
weights_type = "nlme",
L = 100,
B = 100,
cpus = 30,
MSE = FALSE,
na.rm = TRUE,
Ydump = "//esapov/esapov/NAM/GEO/Population/povmap/unitmodel_bcx.csv",
rescale_weights = TRUE)
#------------------------------------------------------------------------------#
saveRDS(bcx_model, "data-clean/estimation_results/unitmodel_boxcox.RDS")
logshift_model <- povmap::ebp(fixed = as.formula(paste("wel_abs ~ ", paste(nam_selvars_list,
collapse= "+"))),
pop_data = as.data.frame(na.omit(census_dt[, c(nam_selvars_list,
"const_code","hhsize"),
with = F])),
pop_domains = "const_code",
smp_data = as.data.frame(na.omit(survey_dt[, c("wel_abs",
nam_selvars_list,
"new_const_code",
"hhweight"),
with = F])),
smp_domains = "new_const_code",
transformation = "log.shift",
threshold = 6249,
pop_weights = "hhsize",
weights = "hhweight",
weights_type = "nlme",
L = 100,
B = 100,
cpus = 30,
MSE = FALSE,
na.rm = TRUE,
Ydump = "//esapov/esapov/NAM/GEO/Population/povmap/unitmodel_logshift.csv",
rescale_weights = TRUE)
#------------------------------------------------------------------------------#
saveRDS(bcx_model, "data-clean/estimation_results/unitmodel_logshift.RDS")
summary(log_model)
summary(log_model$model)
summary(bcx_model)
summary(logshift_model$model)
summary(logshift_model)
summary(ord_model)
ord_model
### merge to shapefile for CCDR work
shp_dt <- sf::st_read("data-raw/shapefiles/ADMIN_Constituency_Boundaries_2014.shp")
census_dt[, const_merge := str_replace_all(constituency_name, " ", "")]
census_dt[, const_merge := tolower(const_merge)]
census_dt[, const_merge := str_replace_all(const_merge, "[^[:alnum:]]", "")]
census_dt[, const_merge := paste0(const_code, "-", const_merge)]
shp_dt <-
shp_dt %>%
mutate(const_merge = str_replace_all(CONST, " ", "")) %>%
mutate(const_merge = tolower(const_merge)) %>%
mutate(const_merge = str_replace_all(const_merge, "[^[:alnum:]]", "")) %>%
mutate(const_merge = paste0(CONST_ID, "-", const_merge))
fuzzyshp_dt <-
stringdist_join(x = unique(census_dt[, c("const_code", "const_merge")]),
y = shp_dt[, c("CONST_ID", "const_merge")] %>% sf::st_drop_geometry(),
by = "const_merge",
mode = "left",
method = "jw",
max_dist = 99,
distance_col = "dist")
fuzzyshp_dt <- as.data.table(fuzzyshp_dt)
indices_dt <- fuzzyshp_dt[, .I[which.min(dist)], by = const_merge.y]
shpmatch_dt <- fuzzyshp_dt[indices_dt$V1]
shpmatch_dt %>%
mutate(const_code = as.factor(const_code)) %>%
merge(log_model$ind,
by.x = "const_code",
by.y = "Domain") %>%
merge(census_dt[, !duplicated(colnames(census_dt)), with = F] %>%
mutate(const_code = as.factor(const_code)) %>%
group_by(const_code) %>%
summarise(pop = sum(hhsize, na.rm = TRUE)),
by = "const_code",
all = TRUE) %>%
select(CONST_ID, Head_Count, pop) %>%
group_by(CONST_ID) %>%
summarise(Head_Count = mean(Head_Count, na.rm = TRUE),
censuspop = mean(pop, na.rm = TRUE))
shpmatch_dt <-
shpmatch_dt %>%
mutate(const_code = as.factor(const_code)) %>%
merge(log_model$ind,
by.x = "const_code",
by.y = "Domain") %>%
merge(census_dt[, !duplicated(colnames(census_dt)), with = F] %>%
mutate(const_code = as.factor(const_code)) %>%
group_by(const_code) %>%
summarise(pop = sum(hhsize, na.rm = TRUE)),
by = "const_code",
all = TRUE) %>%
select(CONST_ID, Head_Count, pop) %>%
group_by(CONST_ID) %>%
summarise(Head_Count = mean(Head_Count, na.rm = TRUE),
censuspop = mean(pop, na.rm = TRUE))
shp_dt %>%
merge(shpmatch_dt, on = "CONST_ID")
shp_dt <-
shp_dt %>%
merge(shpmatch_dt, on = "CONST_ID")
saveRDS(shp_dt, "../MapBotsMibiaR/inst/data/nam_povertyshp.RDS")
saveRDS(shp_dt, "data-clean/estimation_results/povshapefile.RDS")
save.image(file = "data-clean/estimation_results/pmap_image.RData")
################################################################################
################# POST ESTIMATION ANALYTICS FOR THE EBP MODEL ##################
################################################################################
pacman::p_load(data.table, dplyr, stringr, fuzzyjoin, povmap)
#------------------------------------------------------------------------------#
### read in all the data
logunit_model <- readRDS("data-clean/estimation_results/unitmodel_log.RDS")
nam_selvars_list <- readRDS("data-raw/nam_selvars_list.RDS")
census_dt <- readRDS("data-clean/census_final.RDS")
survey_dt <- readRDS("data-clean/survey_final.RDS")
devtools::load_all()
census_dt$const_code <- as.numeric(census_dt$const_code)
survey_dt$new_const_code <- as.numeric(survey_dt$new_const_code)
survey_dt[, !duplicated(colnames(survey_dt)), with = F] %>%
mutate(poor_var = ifelse(wel_abs < 6249.473, 1, 0)) %>%
summarize(weighted.mean(x = poor_var,
w = wta_hh * hhsize,
na.rm = TRUE))
survey_dt$wta_pop
summary(survey_dt$wta_pop)
summary(survey_dt$hhweight)
direct_dt <- povmap::direct(y = "wel_abs",
smp_data = as.data.frame(na.omit(survey_dt[, c("wel_abs",
nam_selvars_list,
"new_const_code",
"hhweight"),
with = F])),
smp_domains = "new_const_code",
weights = "hhweight",
var = TRUE,
threshold = 6249.473)
direct_dt
direct_dt$ind
survey_dt$new_const_code
census_dt <- readRDS("data-clean/census_final.RDS")
survey_dt <- readRDS("data-clean/survey_final.RDS")
survey_dt$new_const_code
survey_dt[, new_const_code := as.integer(as.character(new_const_code))]
census_dt[, const_code := as.integer(as.character(const_code))]
unique(survey_dt$new_const_code)[unique(survey_dt$new_const_code) %in% unique(census_dt$const_code)]
unique(survey_dt$new_const_code)[!unique(survey_dt$new_const_code) %in% unique(census_dt$const_code)]
survey_dt[is.na(new_const_code), new_const_code := const_code]
unique(survey_dt$new_const_code)[!unique(survey_dt$new_const_code) %in% unique(census_dt$const_code)]
unique(survey_dt$new_const_code)[!unique(survey_dt$new_const_code) %in% unique(census_dt$const_code)]
unique(survey_dt$new_const_code)[unique(survey_dt$new_const_code) %in% unique(census_dt$const_code)]
direct_dt <- povmap::direct(y = "wel_abs",
smp_data = as.data.frame(na.omit(survey_dt[, c("wel_abs",
nam_selvars_list,
"new_const_code",
"hhweight"),
with = F])),
smp_domains = "new_const_code",
weights = "hhweight",
var = TRUE,
threshold = 6249.473)
direct_dt$ind
saveRDS(direct_dt, "inst/postestimation/tables/direct_estimates.RDS")
logunit_model$framework$smp_data <- logunit_model$model$data
census_dt$new_const_code <- census_dt$const_code
descriptives_dt <-
ebp_reportdescriptives(model = logunit_model,
direct = direct_dt,
smp_data = as.data.frame(na.omit(survey_dt[, c("wel_abs",
nam_selvars_list,
"hhweight", "hid",
"region_name",
"const_code",
"new_const_code"),
with = FALSE])),
weights = "hhweight",
pop_weights = "hhsize",
CV_level = "region_name",
pop_data = as.data.frame(census_dt),
pop_domains = "new_const_code",
threshold = 6249.473)
descriptives_dt$cv_table
descriptives_dt$basicinfo_df
descriptives_dt$poverty_df
saveRDS(descriptives_dt, "inst/postestimation/tables/direct_estimates.RDS")
checkvariables_dt <-
ebp_test_means(varlist = nam_selvars_list,
pop_data = as.data.frame(census_dt),
smp_data = as.data.frame(survey_dt),
weights = "hhweight",
pop_weights = "hhsize")
ebp_reportcoef_table(logunit_model, 4)
ebp_modelresults_dt <- ebp_reportcoef_table(logunit_model, 4)
write.csv(ebp_modelresults_dt,
"inst/postestimation/tables/ebp_regressionresults.csv")
logunit_model$framework$smp_data$cluster <-
as.data.frame(na.omit(survey_dt[!is.na(new_const_code),
c(nam_selvars_list,
"new_const_code",
"wta_hh", "cluster"),
with = FALSE]))$cluster
replace_dt <- as.data.frame(na.omit(survey_dt[, c("wel_PPP",
nam_selvars_list,
"new_const_code",
"hhweight"),
with = F]))
logunit_model$framework$smp_data$hhweight <- replace_dt$hhweight
logunit_model$model$data$hhweight <- replace_dt$hhweight
cv_dt <- ebp_compute_cv(model = logunit_model,
calibvar = "new_const_code",
designvar = "cluster",
threshold = 6249.473)
cv_dt
devtools::load_all()
cv_dt <- ebp_compute_cv(model = logunit_model,
calibvar = "new_const_code",
designvar = "cluster",
threshold = 6249.473)
cv_dt
debug(ebp_compute_Cv)
debug(ebp_compute_cv)
cv_dt <- ebp_compute_cv(model = logunit_model,
calibvar = "new_const_code",
designvar = "cluster",
threshold = 6249.473)
direct_calib
model$framework$smp_data
model$model$data
cv_dt <- ebp_compute_cv(model = logunit_model,
calibvar = "new_const_code",
designvar = "cluster",
threshold = log(6249.473))
devtools::load_all()
ebp_reportdescriptives(model = logunit_model,
direct = direct_dt,
smp_data = as.data.frame(na.omit(survey_dt[, c("wel_abs",
nam_selvars_list,
"hhweight", "hid",
"region_name",
"const_code",
"new_const_code"),
with = FALSE])),
weights = "hhweight",
pop_weights = "hhsize",
CV_level = "region_name",
pop_data = as.data.frame(census_dt),
pop_domains = "new_const_code",
threshold = log(6249.473))
as.data.frame(na.omit(survey_dt[, c("wel_abs",
nam_selvars_list,
"hhweight", "hid",
"region_name",
"const_code",
"new_const_code"),
with = FALSE]))
ebp_reportdescriptives(model = logunit_model,
direct = direct_dt,
smp_data = as.data.frame(na.omit(survey_dt[, c("wel_abs",
nam_selvars_list,
"hhweight", "hid",
"region_name",
"const_code",
"new_const_code"),
with = FALSE])),
weights = "hhweight",
pop_weights = "hhsize",
CV_level = "region_name",
pop_data = as.data.frame(census_dt),
pop_domains = "new_const_code",
threshold = log(6249.473))
direct_dt$ind
cv_dt <- ebp_compute_cv(model = logunit_model,
calibvar = "new_const_code",
designvar = "cluster",
threshold = log(6249.473))
cv_dt
write.csv(cv_dt, "inst/postestimation/tables/targetarea_cvtable.csv")
cooks_dt <- cooks.distance(logunit_model$model)
cooks_dt <- data.frame(index = seq_along(cooks_dt), cooks_dt)
cooks_dt
saveRDS(cooks_dt, "data-clean/cooks_distance.RDS")
save.image(file = "data-clean/estimation_results/postestpmap_image.RData")
